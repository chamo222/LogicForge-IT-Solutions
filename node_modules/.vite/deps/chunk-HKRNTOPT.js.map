{
  "version": 3,
  "sources": ["../../@clerk/backend/src/jwt/legacyReturn.ts", "../../@clerk/backend/src/index.ts", "../../@clerk/nextjs/src/server/createClerkClient.ts", "../../@clerk/nextjs/src/runtime/browser/safe-node-apis.js", "../../@clerk/nextjs/src/server/fs/utils.ts"],
  "sourcesContent": ["import type { JwtReturnType } from './types';\n\n// TODO(dimkl): Will be probably be dropped in next major version\nexport function withLegacyReturn<T extends (...args: any[]) => Promise<JwtReturnType<any, any>>>(cb: T) {\n  return async (...args: Parameters<T>): Promise<NonNullable<Awaited<ReturnType<T>>['data']>> | never => {\n    const { data, errors } = await cb(...args);\n    if (errors) {\n      throw errors[0];\n    }\n    return data;\n  };\n}\n\n// TODO(dimkl): Will be probably be dropped in next major version\nexport function withLegacySyncReturn<T extends (...args: any[]) => JwtReturnType<any, any>>(cb: T) {\n  return (...args: Parameters<T>): NonNullable<Awaited<ReturnType<T>>['data']> | never => {\n    const { data, errors } = cb(...args);\n    if (errors) {\n      throw errors[0];\n    }\n    return data;\n  };\n}\n", "import type { TelemetryCollectorOptions } from '@clerk/shared/telemetry';\nimport { TelemetryCollector } from '@clerk/shared/telemetry';\nimport type { SDKMetadata } from '@clerk/types';\n\nimport type { ApiClient, CreateBackendApiOptions } from './api';\nimport { createBackendApiClient } from './api';\nimport { withLegacyReturn } from './jwt/legacyReturn';\nimport type { CreateAuthenticateRequestOptions } from './tokens/factory';\nimport { createAuthenticateRequest } from './tokens/factory';\nimport { verifyToken as _verifyToken } from './tokens/verify';\n\nexport const verifyToken = withLegacyReturn(_verifyToken);\n\nexport type ClerkOptions = Omit<CreateBackendApiOptions, 'skipApiVersionInUrl' | 'useMachineSecretKey'> &\n  Partial<\n    Pick<\n      CreateAuthenticateRequestOptions['options'],\n      'audience' | 'jwtKey' | 'proxyUrl' | 'secretKey' | 'publishableKey' | 'domain' | 'isSatellite'\n    >\n  > & { sdkMetadata?: SDKMetadata; telemetry?: Pick<TelemetryCollectorOptions, 'disabled' | 'debug' | 'samplingRate'> };\n\n// The current exported type resolves the following issue in packages importing createClerkClient\n// TS4023: Exported variable 'clerkClient' has or is using name 'AuthErrorReason' from external module \"/packages/backend/dist/index\" but cannot be named.\nexport type ClerkClient = {\n  telemetry: TelemetryCollector;\n} & ApiClient &\n  ReturnType<typeof createAuthenticateRequest>;\n\nexport function createClerkClient(options: ClerkOptions): ClerkClient {\n  const opts = { ...options };\n  const apiClient = createBackendApiClient(opts);\n  const requestState = createAuthenticateRequest({ options: opts, apiClient });\n  const telemetry = new TelemetryCollector({\n    publishableKey: opts.publishableKey,\n    secretKey: opts.secretKey,\n    samplingRate: 0.1,\n    ...(opts.sdkMetadata ? { sdk: opts.sdkMetadata.name, sdkVersion: opts.sdkMetadata.version } : {}),\n    ...(opts.telemetry || {}),\n  });\n\n  return {\n    ...apiClient,\n    ...requestState,\n    telemetry,\n  };\n}\n\n/**\n * General Types\n */\nexport type { OrganizationMembershipRole } from './api/resources';\nexport type { VerifyTokenOptions } from './tokens/verify';\n/**\n * JSON types\n */\nexport type {\n  ActorTokenJSON,\n  AccountlessApplicationJSON,\n  ClerkResourceJSON,\n  TokenJSON,\n  AllowlistIdentifierJSON,\n  BlocklistIdentifierJSON,\n  ClientJSON,\n  CnameTargetJSON,\n  DomainJSON,\n  EmailJSON,\n  EmailAddressJSON,\n  ExternalAccountJSON,\n  IdentificationLinkJSON,\n  InstanceJSON,\n  InstanceRestrictionsJSON,\n  InstanceSettingsJSON,\n  InvitationJSON,\n  JwtTemplateJSON,\n  OauthAccessTokenJSON,\n  OAuthApplicationJSON,\n  OrganizationJSON,\n  OrganizationDomainJSON,\n  OrganizationDomainVerificationJSON,\n  OrganizationInvitationJSON,\n  OrganizationSettingsJSON,\n  PublicOrganizationDataJSON,\n  OrganizationMembershipJSON,\n  OrganizationMembershipPublicUserDataJSON,\n  PhoneNumberJSON,\n  ProxyCheckJSON,\n  RedirectUrlJSON,\n  SessionJSON,\n  SignInJSON,\n  SignInTokenJSON,\n  SignUpJSON,\n  SignUpVerificationJSON,\n  SignUpVerificationsJSON,\n  SMSMessageJSON,\n  UserJSON,\n  VerificationJSON,\n  WaitlistEntryJSON,\n  Web3WalletJSON,\n  DeletedObjectJSON,\n  PaginatedResponseJSON,\n  TestingTokenJSON,\n  WebhooksSvixJSON,\n  BillingPlanJSON,\n  BillingSubscriptionJSON,\n  BillingSubscriptionItemJSON,\n} from './api/resources/JSON';\n\n/**\n * Resources\n */\nexport type {\n  APIKey,\n  ActorToken,\n  AccountlessApplication,\n  AllowlistIdentifier,\n  BlocklistIdentifier,\n  Client,\n  CnameTarget,\n  Domain,\n  EmailAddress,\n  ExternalAccount,\n  Feature,\n  Instance,\n  InstanceRestrictions,\n  InstanceSettings,\n  Invitation,\n  JwtTemplate,\n  Machine,\n  M2MToken,\n  OauthAccessToken,\n  OAuthApplication,\n  Organization,\n  OrganizationDomain,\n  OrganizationDomainVerification,\n  OrganizationInvitation,\n  OrganizationMembership,\n  OrganizationMembershipPublicUserData,\n  OrganizationSettings,\n  PhoneNumber,\n  SamlConnection,\n  Session,\n  SignInToken,\n  SignUpAttempt,\n  SMSMessage,\n  Token,\n  User,\n  TestingToken,\n  BillingPlan,\n  BillingSubscription,\n  BillingSubscriptionItem,\n} from './api/resources';\n\n/**\n * Webhooks event types\n */\nexport type {\n  EmailWebhookEvent,\n  OrganizationWebhookEvent,\n  OrganizationDomainWebhookEvent,\n  OrganizationInvitationWebhookEvent,\n  OrganizationMembershipWebhookEvent,\n  RoleWebhookEvent,\n  PermissionWebhookEvent,\n  SessionWebhookEvent,\n  SMSWebhookEvent,\n  UserWebhookEvent,\n  WaitlistEntryWebhookEvent,\n  WebhookEvent,\n  WebhookEventType,\n  BillingPaymentAttemptWebhookEvent,\n  BillingSubscriptionWebhookEvent,\n  BillingSubscriptionItemWebhookEvent,\n} from './api/resources/Webhooks';\n\n/**\n * Auth objects\n */\nexport type { AuthObject, InvalidTokenAuthObject } from './tokens/authObjects';\nexport type { SessionAuthObject, MachineAuthObject } from './tokens/types';\n", "import { createClerkClient } from '@clerk/backend';\n\nimport {\n  API_URL,\n  API_VERSION,\n  DOMAIN,\n  IS_SATELLITE,\n  MACHINE_SECRET_KEY,\n  PROXY_URL,\n  PUBLISHABLE_KEY,\n  SDK_METADATA,\n  SECRET_KEY,\n  TELEMETRY_DEBUG,\n  TELEMETRY_DISABLED,\n} from './constants';\n\nconst clerkClientDefaultOptions = {\n  secretKey: SECRET_KEY,\n  publishableKey: PUBLISHABLE_KEY,\n  apiUrl: API_URL,\n  apiVersion: API_VERSION,\n  userAgent: `${PACKAGE_NAME}@${PACKAGE_VERSION}`,\n  proxyUrl: PROXY_URL,\n  domain: DOMAIN,\n  isSatellite: IS_SATELLITE,\n  machineSecretKey: MACHINE_SECRET_KEY,\n  sdkMetadata: SDK_METADATA,\n  telemetry: {\n    disabled: TELEMETRY_DISABLED,\n    debug: TELEMETRY_DEBUG,\n  },\n};\n\nexport const createClerkClientWithOptions: typeof createClerkClient = options =>\n  createClerkClient({ ...clerkClientDefaultOptions, ...options });\n", "/**\n * This file is used for conditional imports to mitigate bundling issues with Next.js server actions on version prior to 14.1.0.\n */\nconst fs = undefined;\nconst path = undefined;\nconst cwd = undefined;\n\nmodule.exports = { fs, path, cwd };\n", "/**\n * Attention: Only import this module when the node runtime is used.\n * We are using conditional imports to mitigate bundling issues with Next.js server actions on version prior to 14.1.0.\n */\nimport nodeRuntime from '#safe-node-apis';\n\n// Generic assertion function that acts as a proper type guard\nfunction assertNotNullable<T>(value: T, moduleName: string): asserts value is NonNullable<T> {\n  if (!value) {\n    throw new Error(`Clerk: ${moduleName} is missing. This is an internal error. Please contact Clerk's support.`);\n  }\n}\n\nconst nodeFsOrThrow = (): NonNullable<typeof nodeRuntime.fs> => {\n  assertNotNullable(nodeRuntime.fs, 'fs');\n  return nodeRuntime.fs;\n};\n\nconst nodePathOrThrow = (): NonNullable<typeof nodeRuntime.path> => {\n  assertNotNullable(nodeRuntime.path, 'path');\n  return nodeRuntime.path;\n};\n\nconst nodeCwdOrThrow = (): NonNullable<typeof nodeRuntime.cwd> => {\n  assertNotNullable(nodeRuntime.cwd, 'cwd');\n  return nodeRuntime.cwd;\n};\n\nexport { nodeCwdOrThrow, nodeFsOrThrow, nodePathOrThrow };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAGO,SAAS,iBAAiF,IAAO;AACtG,SAAO,UAAU,SAAsF;AACrG,UAAM,EAAE,MAAM,OAAO,IAAI,MAAM,GAAG,GAAG,IAAI;AACzC,QAAI,QAAQ;AACV,YAAM,OAAO,CAAC;IAChB;AACA,WAAO;EACT;AACF;;;ACAO,IAAMA,eAAc,iBAAiB,WAAY;AAiBjD,SAAS,kBAAkB,SAAoC;AACpE,QAAM,OAAO,EAAE,GAAG,QAAQ;AAC1B,QAAM,YAAY,uBAAuB,IAAI;AAC7C,QAAM,eAAe,0BAA0B,EAAE,SAAS,MAAM,UAAU,CAAC;AAC3E,QAAM,YAAY,IAAI,mBAAmB;IACvC,gBAAgB,KAAK;IACrB,WAAW,KAAK;IAChB,cAAc;IACd,GAAI,KAAK,cAAc,EAAE,KAAK,KAAK,YAAY,MAAM,YAAY,KAAK,YAAY,QAAQ,IAAI,CAAC;IAC/F,GAAI,KAAK,aAAa,CAAC;EACzB,CAAC;AAED,SAAO;IACL,GAAG;IACH,GAAG;IACH;EACF;AACF;;;AC7BA,IAAM,4BAA4B;EAChC,WAAW;EACX,gBAAgB;EAChB,QAAQ;EACR,YAAY;EACZ,WAAW,GAAG,eAAY,IAAI,QAAe;EAC7C,UAAU;EACV,QAAQ;EACR,aAAa;EACb,kBAAkB;EAClB,aAAa;EACb,WAAW;IACT,UAAU;IACV,OAAO;EACT;AACF;AAEO,IAAM,+BAAyD,CAAA,YACpE,kBAAkB,EAAE,GAAG,2BAA2B,GAAG,QAAQ,CAAC;;;AClChE,IAAA,yBAAA,WAAA;EAAA,wCAAA,SAAA,QAAA;AAGA,UAAM,KAAK;AACX,UAAM,OAAO;AACb,UAAM,MAAM;AAEZ,WAAO,UAAU,EAAE,IAAI,MAAM,IAAI;EAAA;AAAA,CAAA;;;;ACAjC,SAAS,kBAAqB,OAAU,YAAqD;AAC3F,MAAI,CAAC,OAAO;AACV,UAAM,IAAI,MAAM,UAAU,UAAU,yEAAyE;EAC/G;AACF;AAEA,IAAM,gBAAgB,MAA0C;AAC9D,oBAAkB,uBAAY,IAAI,IAAI;AACtC,SAAO,uBAAY;AACrB;AAEA,IAAM,kBAAkB,MAA4C;AAClE,oBAAkB,uBAAY,MAAM,MAAM;AAC1C,SAAO,uBAAY;AACrB;AAEA,IAAM,iBAAiB,MAA2C;AAChE,oBAAkB,uBAAY,KAAK,KAAK;AACxC,SAAO,uBAAY;AACrB;",
  "names": ["verifyToken"]
}
