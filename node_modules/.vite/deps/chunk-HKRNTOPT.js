import {
  API_URL,
  API_VERSION,
  DOMAIN,
  IS_SATELLITE,
  MACHINE_SECRET_KEY,
  PROXY_URL,
  PUBLISHABLE_KEY,
  SDK_METADATA,
  SECRET_KEY,
  TELEMETRY_DEBUG,
  TELEMETRY_DISABLED,
  createAuthenticateRequest,
  createBackendApiClient,
  verifyToken
} from "./chunk-EZPYZ6S7.js";
import {
  __commonJS
} from "./chunk-VEWEVQY3.js";
import {
  TelemetryCollector
} from "./chunk-65WSYWCZ.js";

// node_modules/@clerk/backend/dist/chunk-P263NW7Z.mjs
function withLegacyReturn(cb) {
  return async (...args) => {
    const { data, errors } = await cb(...args);
    if (errors) {
      throw errors[0];
    }
    return data;
  };
}

// node_modules/@clerk/backend/dist/index.mjs
var verifyToken2 = withLegacyReturn(verifyToken);
function createClerkClient(options) {
  const opts = { ...options };
  const apiClient = createBackendApiClient(opts);
  const requestState = createAuthenticateRequest({ options: opts, apiClient });
  const telemetry = new TelemetryCollector({
    publishableKey: opts.publishableKey,
    secretKey: opts.secretKey,
    samplingRate: 0.1,
    ...opts.sdkMetadata ? { sdk: opts.sdkMetadata.name, sdkVersion: opts.sdkMetadata.version } : {},
    ...opts.telemetry || {}
  });
  return {
    ...apiClient,
    ...requestState,
    telemetry
  };
}

// node_modules/@clerk/nextjs/dist/esm/server/createClerkClient.js
var clerkClientDefaultOptions = {
  secretKey: SECRET_KEY,
  publishableKey: PUBLISHABLE_KEY,
  apiUrl: API_URL,
  apiVersion: API_VERSION,
  userAgent: `${"@clerk/nextjs"}@${"6.32.2"}`,
  proxyUrl: PROXY_URL,
  domain: DOMAIN,
  isSatellite: IS_SATELLITE,
  machineSecretKey: MACHINE_SECRET_KEY,
  sdkMetadata: SDK_METADATA,
  telemetry: {
    disabled: TELEMETRY_DISABLED,
    debug: TELEMETRY_DEBUG
  }
};
var createClerkClientWithOptions = (options) => createClerkClient({ ...clerkClientDefaultOptions, ...options });

// node_modules/@clerk/nextjs/dist/esm/runtime/browser/safe-node-apis.js
var require_safe_node_apis = __commonJS({
  "src/runtime/browser/safe-node-apis.js"(exports, module) {
    const fs = void 0;
    const path = void 0;
    const cwd = void 0;
    module.exports = { fs, path, cwd };
  }
});
var safe_node_apis_default = require_safe_node_apis();

// node_modules/@clerk/nextjs/dist/esm/server/fs/utils.js
function assertNotNullable(value, moduleName) {
  if (!value) {
    throw new Error(`Clerk: ${moduleName} is missing. This is an internal error. Please contact Clerk's support.`);
  }
}
var nodeFsOrThrow = () => {
  assertNotNullable(safe_node_apis_default.fs, "fs");
  return safe_node_apis_default.fs;
};
var nodePathOrThrow = () => {
  assertNotNullable(safe_node_apis_default.path, "path");
  return safe_node_apis_default.path;
};
var nodeCwdOrThrow = () => {
  assertNotNullable(safe_node_apis_default.cwd, "cwd");
  return safe_node_apis_default.cwd;
};

export {
  createClerkClientWithOptions,
  nodeFsOrThrow,
  nodePathOrThrow,
  nodeCwdOrThrow
};
//# sourceMappingURL=chunk-HKRNTOPT.js.map
