import {
  createClerkClientWithOptions,
  nodeCwdOrThrow,
  nodeFsOrThrow,
  nodePathOrThrow
} from "./chunk-HKRNTOPT.js";
import {
  require_headers
} from "./chunk-OEMNNDGH.js";
import "./chunk-EZPYZ6S7.js";
import "./chunk-VEWEVQY3.js";
import "./chunk-65WSYWCZ.js";
import "./chunk-Y47XA3OG.js";
import "./chunk-R4F3VVIN.js";
import "./chunk-JG6EVUGA.js";
import {
  __toESM
} from "./chunk-3EJPJMEH.js";

// node_modules/@clerk/nextjs/dist/esm/server/keyless-custom-headers.js
var import_headers = __toESM(require_headers());
async function collectKeylessMetadata() {
  var _a, _b, _c, _d, _e, _f;
  const headerStore = await (0, import_headers.headers)();
  return {
    nodeVersion: process.version,
    nextVersion: getNextVersion(),
    npmConfigUserAgent: process.env.npm_config_user_agent,
    // eslint-disable-line
    userAgent: (_a = headerStore.get("User-Agent")) != null ? _a : "unknown user-agent",
    port: process.env.PORT,
    // eslint-disable-line
    host: (_b = headerStore.get("host")) != null ? _b : "unknown host",
    xPort: (_c = headerStore.get("x-forwarded-port")) != null ? _c : "unknown x-forwarded-port",
    xHost: (_d = headerStore.get("x-forwarded-host")) != null ? _d : "unknown x-forwarded-host",
    xProtocol: (_e = headerStore.get("x-forwarded-proto")) != null ? _e : "unknown x-forwarded-proto",
    xClerkAuthStatus: (_f = headerStore.get("x-clerk-auth-status")) != null ? _f : "unknown x-clerk-auth-status"
  };
}
function getNextVersion() {
  var _a;
  try {
    return (_a = process.title) != null ? _a : "unknown-process-title";
  } catch {
    return void 0;
  }
}
function formatMetadataHeaders(metadata) {
  const headers2 = new Headers();
  if (metadata.nodeVersion) {
    headers2.set("Clerk-Node-Version", metadata.nodeVersion);
  }
  if (metadata.nextVersion) {
    headers2.set("Clerk-Next-Version", metadata.nextVersion);
  }
  if (metadata.npmConfigUserAgent) {
    headers2.set("Clerk-NPM-Config-User-Agent", metadata.npmConfigUserAgent);
  }
  if (metadata.userAgent) {
    headers2.set("Clerk-Client-User-Agent", metadata.userAgent);
  }
  if (metadata.port) {
    headers2.set("Clerk-Node-Port", metadata.port);
  }
  if (metadata.host) {
    headers2.set("Clerk-Client-Host", metadata.host);
  }
  if (metadata.xPort) {
    headers2.set("Clerk-X-Port", metadata.xPort);
  }
  if (metadata.xHost) {
    headers2.set("Clerk-X-Host", metadata.xHost);
  }
  if (metadata.xProtocol) {
    headers2.set("Clerk-X-Protocol", metadata.xProtocol);
  }
  if (metadata.xClerkAuthStatus) {
    headers2.set("Clerk-Auth-Status", metadata.xClerkAuthStatus);
  }
  return headers2;
}

// node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js
var CLERK_HIDDEN = ".clerk";
var CLERK_LOCK = "clerk.lock";
function updateGitignore() {
  const { existsSync, writeFileSync, readFileSync, appendFileSync } = nodeFsOrThrow();
  const path = nodePathOrThrow();
  const cwd = nodeCwdOrThrow();
  const gitignorePath = path.join(cwd(), ".gitignore");
  if (!existsSync(gitignorePath)) {
    writeFileSync(gitignorePath, "");
  }
  const gitignoreContent = readFileSync(gitignorePath, "utf-8");
  const COMMENT = `# clerk configuration (can include secrets)`;
  if (!gitignoreContent.includes(CLERK_HIDDEN + "/")) {
    appendFileSync(gitignorePath, `
${COMMENT}
/${CLERK_HIDDEN}/
`);
  }
}
var generatePath = (...slugs) => {
  const path = nodePathOrThrow();
  const cwd = nodeCwdOrThrow();
  return path.join(cwd(), CLERK_HIDDEN, ...slugs);
};
var _TEMP_DIR_NAME = ".tmp";
var getKeylessConfigurationPath = () => generatePath(_TEMP_DIR_NAME, "keyless.json");
var getKeylessReadMePath = () => generatePath(_TEMP_DIR_NAME, "README.md");
var isCreatingFile = false;
function safeParseClerkFile() {
  const { readFileSync } = nodeFsOrThrow();
  try {
    const CONFIG_PATH = getKeylessConfigurationPath();
    let fileAsString;
    try {
      fileAsString = readFileSync(CONFIG_PATH, { encoding: "utf-8" }) || "{}";
    } catch {
      fileAsString = "{}";
    }
    return JSON.parse(fileAsString);
  } catch {
    return void 0;
  }
}
var lockFileWriting = () => {
  const { writeFileSync } = nodeFsOrThrow();
  isCreatingFile = true;
  writeFileSync(
    CLERK_LOCK,
    // In the rare case, the file persists give the developer enough context.
    "This file can be deleted. Please delete this file and refresh your application",
    {
      encoding: "utf8",
      mode: "0777",
      flag: "w"
    }
  );
};
var unlockFileWriting = () => {
  const { rmSync } = nodeFsOrThrow();
  try {
    rmSync(CLERK_LOCK, { force: true, recursive: true });
  } catch {
  }
  isCreatingFile = false;
};
var isFileWritingLocked = () => {
  const { existsSync } = nodeFsOrThrow();
  return isCreatingFile || existsSync(CLERK_LOCK);
};
async function createOrReadKeyless() {
  const { writeFileSync, mkdirSync } = nodeFsOrThrow();
  if (isFileWritingLocked()) {
    return null;
  }
  lockFileWriting();
  const CONFIG_PATH = getKeylessConfigurationPath();
  const README_PATH = getKeylessReadMePath();
  mkdirSync(generatePath(_TEMP_DIR_NAME), { recursive: true });
  updateGitignore();
  const envVarsMap = safeParseClerkFile();
  if ((envVarsMap == null ? void 0 : envVarsMap.publishableKey) && (envVarsMap == null ? void 0 : envVarsMap.secretKey)) {
    unlockFileWriting();
    return envVarsMap;
  }
  const client = createClerkClientWithOptions({});
  const keylessHeaders = await collectKeylessMetadata().then(formatMetadataHeaders).catch(() => new Headers());
  const accountlessApplication = await client.__experimental_accountlessApplications.createAccountlessApplication({ requestHeaders: keylessHeaders }).catch(() => null);
  if (accountlessApplication) {
    writeFileSync(CONFIG_PATH, JSON.stringify(accountlessApplication), {
      encoding: "utf8",
      mode: "0777",
      flag: "w"
    });
    const README_NOTIFICATION = `
## DO NOT COMMIT
This directory is auto-generated from \`@clerk/nextjs\` because you are running in Keyless mode. Avoid committing the \`.clerk/\` directory as it includes the secret key of the unclaimed instance.
  `;
    writeFileSync(README_PATH, README_NOTIFICATION, {
      encoding: "utf8",
      mode: "0777",
      flag: "w"
    });
  }
  unlockFileWriting();
  return accountlessApplication;
}
function removeKeyless() {
  const { rmSync } = nodeFsOrThrow();
  if (isFileWritingLocked()) {
    return void 0;
  }
  lockFileWriting();
  try {
    rmSync(generatePath(), { force: true, recursive: true });
  } catch {
  }
  unlockFileWriting();
}
export {
  createOrReadKeyless,
  removeKeyless,
  safeParseClerkFile
};
//# sourceMappingURL=keyless-node-3PLJRGEJ.js.map
